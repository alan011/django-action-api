#!/usr/local/bin/python3
import os
import sys
import django
import random
import string
import argparse
import re

BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
sys.path.append(BASE_DIR)

manage_file = os.path.join(BASE_DIR, 'manage.py')
if not os.path.isfile(manage_file):
    raise SystemExit(f'FATAL: It seems not a django project in directory: {BASE_DIR}')

DJANGO_SETTING = None
with open(manage_file) as f:
    for line in f:
        if re.search(r"os.environ.setdefault\('DJANGO_SETTINGS_MODULE'", line):
            DJANGO_SETTING = line.split("'")[3]
            break
if not DJANGO_SETTING:
    raise SystemExit(f"FATAL: It seems not a django `manage.py`: {manage_file}")

os.environ.setdefault("DJANGO_SETTINGS_MODULE", DJANGO_SETTING)
django.setup()

from corelib.api_auth.token.models import AuthToken
from datetime import timedelta
from django.utils import timezone


class TokenManager(object):
    model = AuthToken
    username_format = r'^[\w\.\-\_]+$'

    def __init__(self, username_len=8, token_len=64):
        self.username_len = username_len
        self.token_len = token_len
        self.args = None

    def _token_dup_check(self, filter_field, func, *func_args):
        value = func(*func_args)
        while self.model.objects.filter(**{filter_field: value}).exists():
            value = func(*func_args)
        return value

    def _gen_random_str(self, seeds, length):
        return ''.join(seeds[random.randint(0, len(seeds) - 1)] for i in range(length))

    def _make_expired_message(self, token_obj):
        expired_message = 'Expired!'
        if token_obj.expired_time == 0:
            expired_message = "Never expired."
        elif(timezone.now() - token_obj.sign_date < timedelta(seconds=token_obj.expired_time)):
            expired_date = token_obj.sign_date + timedelta(seconds=token_obj.expired_time)
            expired_message = 'Will be expired at {}'.format(expired_date.strftime('%F %T'))
        return expired_message

    def _delete_obj(self, obj):
        username, token = obj.username, obj.token
        obj.delete()
        return '{}.{}\tDeleted!'.format(username, token)

    def make_token(self):
        if not self.args.username:
            self.args.username = self._token_dup_check('username', self._gen_random_str, string.ascii_letters, self.username_len)
        if not re.search(self.username_format, self.args.username) or len(self.args.username) > 64:
            raise SystemExit('Invalid username: {}'.format(self.args.username))

        token = self._token_dup_check('token', self._gen_random_str, string.ascii_letters + string.digits, self.token_len)
        obj = self.model(username=self.args.username, token=token, expired_time=self.args.expired_time)
        obj.save()

        print('{}.{}\t{}'.format(self.args.username, token, self._make_expired_message(obj)))

    def list_token(self):
        for obj in self.model.objects.all():
            print('{}.{}\t{}'.format(obj.username, obj.token, self._make_expired_message(obj)))

    def clean_token(self):
        for obj in self.model.objects.all():
            if obj.expired_time == 0 or (timezone.now() - obj.sign_date > timedelta(seconds=obj.expired_time)):
                print(self._delete_obj(obj))

    def delete_token(self):
        token = self.args.token_string.split('.')
        token_user = '.'.join(token[:-1])
        token_key = token[-1]
        if len(token_key) != 64:
            raise SystemExit('Invalid token string: {}'.format(self.args.token_string))
        if not re.search(self.username_format, token_user) or len(token_user) > 64:
            raise SystemExit('Invalid token string: {}'.format(self.args.token_string))

        for obj in self.model.objects.filter(username=token_user, token=token_key):
            print(self._delete_obj(obj))

    def run(self):
        parser = argparse.ArgumentParser(prog='token_manager', description="A command line tool to manage tokens.")

        subparsers = parser.add_subparsers(title='subcommands', dest='subcommand', metavar='')

        # Subcommand: add
        add_parser = subparsers.add_parser('add', help="To add a token")
        add_parser.add_argument('-u', '--user', metavar='username', required=False, dest='username',
                                help='To specify a username. If not provided, A random username will be auto-generated.')
        add_parser.add_argument('-e', '--expired-time', metavar='n', type=int, required=False, default=86400,
                                help="To specify a digit expired time in seconds for this token. Default is '86400', means one day. If '0' provided, this token \
will never be expired.")
        add_parser.set_defaults(func=self.make_token)

        # Subcommand: list
        list_parser = subparsers.add_parser('list', help="To list all tokens")
        list_parser.set_defaults(func=self.list_token)

        # Subcommand: delete
        delete_parser = subparsers.add_parser('delete', aliases=['del'], help="To delete a specified token")
        delete_parser.add_argument('token_string', metavar='<token_string>',
                                   help="A token string in format: '<username>.<64-length token>'")
        delete_parser.set_defaults(func=self.delete_token)

        # Subcommand: clean
        clean_parser = subparsers.add_parser('clean', help="To clean expired tokens")
        clean_parser.set_defaults(func=self.clean_token)

        # Dispatching
        self.args = parser.parse_args()
        if self.args.subcommand is None:
            parser.print_help()
        else:
            self.args.func()


if __name__ == '__main__':
    token_manager = TokenManager()
    token_manager.run()
